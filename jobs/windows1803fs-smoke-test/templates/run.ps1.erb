$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }
Write-Host "Starting windows1803fs pre-start"

# Happy path test!

$grootBin = "c:\var\vcap\packages\groot\groot.exe"
$wincBin = "c:\var\vcap\packages\winc\winc.exe"
$containerId = "windows1803fs-smoke-test" + [System.Math]::Round((date -UFormat %s),0)
$grootDriverStore = "<%= link('groot').p('groot.driver_store') %>"
$grootImageUri = "<%= link('groot').p('groot.cached_image_uris')[0] %>"

$stdOut = (& $grootBin --driver-store $grootDriverStore create $grootImageUri $containerId)
if ($LASTEXITCODE -ne 0) {
  Write-Host "groot create failed"
  exit $LASTEXITCODE
}
$config = $stdOut | ConvertFrom-Json

# Write a config file to be executed on the container that will list the certificates in the store
$processSpec=@"
{"args": ["powershell.exe", "-command", "ls Cert:\\\\LocalMachine\\Root"], "cwd": "C:\\" }
"@
$pObj = $processSpec | convertfrom-json
$config | Add-Member -Force -Name "process" -Value $pObj -MemberType NoteProperty

Write-Host "Writing config.json"
$bundleDir = Join-Path $env:TEMP $containerId
$configPath = Join-Path $bundleDir "config.json"
rm -Recurse -Force -ErrorAction SilentlyContinue $bundleDir
mkdir $bundleDir | Out-Null
$configJson = ($config | ConvertTo-Json)
Set-Content -Path $configPath -Value $configJson

# Create the container to test the expected certificates were injected
Write-Host "winc run"
$stdOut = (& $wincBin run -b $bundleDir $containerId)
if ($LASTEXITCODE -ne 0) {
  Write-Host "winc run failed"
  exit $LASTEXITCODE
}

&$grootBin --driver-store $grootDriverStore delete $containerId
if ($LASTEXITCODE -ne 0) {
  Write-Host "groot delete failed"
  exit $LASTEXITCODE
}

$certData = "<%= p("windows-rootfs.trusted_certs") %>"
$certFile=[System.IO.Path]::GetTempFileName()
$certData | Out-File $certFile

$certificateObject = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
$certificateObject.Import($certFile, "", [System.Security.Cryptography.X509Certificates.X509KeyStorageFlags]::DefaultKeySet)
$expectedThumbprint = $certificateObject.Thumbprint

Remove-Item $certFile

# Verify that the container has the injected certificate in the system cert store
if ($stdOut -match $expectedThumbprint) {
  echo "Test succeeded"
  exit 0
}
echo "Test failed. Certificate does not exist in the container"
exit 1
