$ErrorActionPreference = "Stop";
trap { $host.SetShouldExit(1) }
Write-Host "Starting windows1803fs pre-start"

if("<%= p("windows-rootfs.trusted_certs") %>" -eq "") {
  Exit 0
}

Write-Host "Acquiring mutex"
$mtx = New-Object System.Threading.Mutex($false, "GrootRootfsMutex")

if (!$mtx.WaitOne(300000)) {
  throw "Could not acquire Rootfs mutex"
}

Write-Host "Setting binaries"
$grootBin = "c:\var\vcap\packages\groot\groot.exe"
$wincBin = "c:\var\vcap\packages\winc\winc.exe"
$diffExporterBin = "c:\var\vcap\packages\diff-exporter\diff-exporter.exe"
$hydrateBin = "c:\var\vcap\packages\hydrate\hydrate.exe"

Write-Host "Preparing cert data"
$certData = "<%= p("windows-rootfs.trusted_certs") %>"
$encodedCertData = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($certData))

$addCertScript= @"
`$ErrorActionPreference = "Stop";
trap { `$host.SetShouldExit(1) }

`$certFile=[System.IO.Path]::GetTempFileName()
`$decodedCertData = [Convert]::FromBase64String("$encodedCertData")
[IO.File]::WriteAllBytes(`$certFile, `$decodedCertData)

Import-Certificate -CertStoreLocation Cert:\\LocalMachine\Root -FilePath `$certFile
Remove-Item `$certFile
"@

$encodedScript = [Convert]::ToBase64String([System.Text.Encoding]::Unicode.GetBytes($addCertScript))

# workaround for https://github.com/Microsoft/hcsshim/issues/155
Write-Host "Deleting existing containers"
Get-ComputeProcess | foreach { & $wincBin delete $_.Id }

Write-Host "Setting groot driver store"
$grootDriverStore = "<%= p("groot.driver_store") %>"
if(Test-Path "$grootDriverStore\volumes"){
  ls "$grootDriverStore\volumes" | foreach { & $grootBin --driver-store $grootDriverStore delete $_.Name }
}

Write-Host "Begin exporting layer"
<% p("groot.cached_image_uris").each do |uri| %>
  $containerId = "layer" + [System.Math]::Round((date -UFormat %s),0)

  Write-Host "Creating volume"
  $stdOut = (& $grootBin --driver-store $grootDriverStore create <%= uri %> $containerId)

  if ($LASTEXITCODE -ne 0) {
    Write-Error "groot create failed"
  }
  $config = $stdOut | ConvertFrom-Json

  Write-Host "Adding process to config"
  $processSpec=@"
{"args": ["powershell.exe", "-EncodedCommand", "$encodedScript"], "cwd": "C:\\" }
"@

  $pObj = $processSpec | convertfrom-json
  $config | Add-Member -Force -Name "process" -Value $pObj -MemberType NoteProperty

  Write-Host "Writing config.json"
  $bundleDir = Join-Path $env:TEMP $containerId
  $configPath = Join-Path $bundleDir "config.json"
  rm -Recurse -Force -ErrorAction SilentlyContinue $bundleDir
  mkdir $bundleDir | Out-Null
  $configJson = ($config | ConvertTo-Json)
  Set-Content -Path $configPath -Value $configJson

  Write-Host "winc create"
  & $wincBin run -b $bundleDir $containerId
  if ($LASTEXITCODE -ne 0) {
    Write-Error "winc create failed"
  }

  Write-Host "Running diff exporter"
  $diffOutputFile = "$env:TEMP\diff-output" + [System.Math]::Round((date -UFormat %s),0)
  & $diffExporterBin -outputFile $diffOutputFile -containerId $containerId -bundlePath $bundleDir
  if ($LASTEXITCODE -ne 0) {
    Write-Error "diff-exporter failed"
  }

  Write-Host "Running hydrator"
  $ociImage = "<%= uri.split("///").last.gsub("/","\\") %>"
  & $hydrateBin add-layer -ociImage $ociImage -layer $diffOutputFile
  if ($LASTEXITCODE -ne 0) {
    Write-Error "hydrate add-layer failed"
  }

  Write-Host "Cleaning up"
  & $grootBin --driver-store $grootDriverStore delete $containerId
  if ($LASTEXITCODE -ne 0) {
    Write-Error "groot delete failed"
  }
  Remove-Item $diffOutputFile
  if ($? -ne $True) {
    Write-Error "Removing diff-output failed"
  }
<% end %>
Write-Host "Finished exporting layer"

Write-Host "Releasing mutex"
$mtx.ReleaseMutex()
