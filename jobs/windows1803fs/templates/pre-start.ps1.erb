<% if_p("windows-rootfs.trusted_certs") do |trusted_certs| %>
  $ErrorActionPreference = "Stop";
  trap { $host.SetShouldExit(1) }
  Write-Host "Started windows1803fs pre-start"

  # powershell can't handle multiple certs in one file, so we need to split them up
  $certData = "<%= trusted_certs %>"
  $certFile=[System.IO.Path]::GetTempFileName()
  Set-Content -Value $certData -Path $certFile -Encoding Ascii
  $certDirectory = "c:\var\vcap\data\tmp\windows1803fs-trusted-certs"
  rm -Recurse -Force -ErrorAction SilentlyContinue $certDirectory
  mkdir $certDirectory | Out-Null

  $certSplitterBin = "c:\var\vcap\packages\certsplitter-fs\certsplitter.exe"
  & $certSplitterBin $certFile $certDirectory
  if ($LASTEXITCODE -ne 0) {
    Write-Host "certsplitter failed to split certs"
    rm -Recurse -Force -ErrorAction SilentlyContinue $certDirectory
    Remove-Item $certFile
    exit $LASTEXITCODE
  }

  # In practice, there should be a single image uri, however
  # if there's ever more than one, this will take much longer
  # and we should move mutex handling into the cert-injector
  # and create a mutex _per_ image uri.
  $mtx = New-Object System.Threading.Mutex($false, "RootfsMutex")
  $thirtyMinutes = 30 * 60 * 1000
  if (!$mtx.WaitOne($thirtyMinutes)) {
    rm -Recurse -Force -ErrorAction SilentlyContinue $certDirectory
    Remove-Item $certFile
    throw "Could not acquire RootfsMutex after 30 minutes"
  }

  $grootDriverStore = ""
  $grootImageUris = ""

  <%= if_link('groot') do |groot|
    groot.if_p('groot.driver_store') do |driverStore|
      $grootDriverStore = driverStore
    end
    groot.if_p('groot.cached_image_uris') do |imageUris|
      $grootImageUris = imageUris
    end
  end %>

  $certInjectorBin = "c:\var\vcap\packages\cert-injector\cert-injector.exe"

  Write-Host "Running cert-injector"
  & $certInjectorBin $grootDriverStore $certDirectory $grootImageUris.Split(" ")
  if ($LASTEXITCODE -ne 0) {
    Write-Host "cert-injector failed injecting trusted certs"
    rm -Recurse -Force -ErrorAction SilentlyContinue $certDirectory
    Remove-Item $certFile
    $mtx.ReleaseMutex()
    exit $LASTEXITCODE
  }
  Write-Host "Finished running cert-injector"

  rm -Recurse -Force -ErrorAction SilentlyContinue $certDirectory
  Remove-Item $certFile
  $mtx.ReleaseMutex()
  Write-Host "Finished windows1803fs pre-start"
<% end %>
